class Env:
    _instance = None  # ‚Üê SINGLETON MAGIC !

    def __new__(cls, *args, **kwargs):
        """SINGLETON : Une seule instance TOUJOURS"""
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self, filename=".env"):
        # Singleton : __init__ ne s'ex√©cute QU'UNE FOIS
        if not hasattr(self, 'initialized'):
            self.filename = filename
            self.data = {}
            self.load()
            self.initialized = True

    def load(self, exclude=['NTP_SYNC','IS_UTC','BOOT_RTC_DATE','SENSOR_LOOP']):
        """Charge le fichier .env"""
        self.data = {}
        try:
            with open(self.filename, 'r') as f:
                for line in f:
                    line = line.strip()
                    
                    # Ignore les lignes vides
                    if not line:
                        continue
                    
                    # Supprime commentaires
                    if '#' in line:
                        line = line.split('#', 1)[0].rstrip()
                    
                    # Ignore les lignes sans '='
                    if '=' not in line:
                        continue
                    
                    # Format: KEY=value
                    key, value = line.split('=', 1)
                    key = key.strip()
                    
                    if key in exclude:
                        continue
                    
                    value = value.strip()
                    
                    # Supprime guillemets si pr√©sents
                    if (value.startswith('"') and value.endswith('"')) or \
                       (value.startswith("'") and value.endswith("'")):
                        value = value[1:-1]
                    
                    # Convertit 'True'/'False' en bool√©ens
                    if value.lower() == 'true':
                        value = True
                    elif value.lower() == 'false':
                        value = False
                    else:
                        try:
                            # Essayer de convertir en int
                            value = int(value)
                        except ValueError:
                            try:
                                # Essayer de convertir en float
                                value = float(value)
                            except ValueError:
                                pass  # Garder comme cha√Æne si √©chec
                    
                    self.data[key] = value
            
            print(f"{len(self.data)} variables env charg√©es depuis {self.filename}")
            return True
            
        except OSError as e:
            print(f"Fichier {self.filename} non trouv√©, cr√©ation...")
            self.save()
            return False

    def get(self, key, default=None):
        """Retourne la valeur d'une cl√©"""
        return self.data.get(key, default)

    def set(self, key, value):
        """D√©finit une valeur ET sauvegarde imm√©diatement"""
        self.data[key] = value
        self.save()
        print(f"set .env {key} = {value}")

    def save(self):
        """Sauvegarde TOUS les changements dans le fichier"""
        try:
            with open(self.filename, 'w') as f:
                f.write("# .env File\n")
                f.write("# Generated by env.py\n\n")
                
                for key, value in sorted(self.data.items()):
                    f.write(f"{key}={value}\n")
            
            #print(f"‚úÖ {self.filename} sauvegard√© avec {len(self.data)} variables")
            return True
            
        except OSError as e:
            print(f"Erreur sauvegarde: {e}")
            return 

    def delete(self, key):
        """Supprime une cl√© et sauvegarde"""
        if key in self.data:
            del self.data[key]
            self.save()
            return True
        return False

# üåü EXPORT SINGLETON PR√äT √Ä UTILISER
env = Env()